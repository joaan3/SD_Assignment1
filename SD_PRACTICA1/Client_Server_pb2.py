# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Client_Server.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='Client_Server.proto',
  package='Client_Server',
  syntax='proto3',
  serialized_pb=_b('\n\x13\x43lient_Server.proto\x12\rClient_Server\x1a\x1bgoogle/protobuf/empty.proto\"4\n\nClientInfo\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02ip\x18\x02 \x01(\t\x12\x0c\n\x04port\x18\x03 \x01(\x05\"\x1a\n\nClientName\x12\x0c\n\x04name\x18\x01 \x01(\t\"4\n\x10RegisterResponse\x12\x0f\n\x07success\x18\x01 \x01(\x08\x12\x0f\n\x07message\x18\x02 \x01(\t\"(\n\x0c\x43lientParams\x12\n\n\x02ip\x18\x01 \x01(\t\x12\x0c\n\x04port\x18\x02 \x01(\x05\x32\xa6\x01\n\x0cRedisService\x12L\n\x0eRegisterClient\x12\x19.Client_Server.ClientInfo\x1a\x1f.Client_Server.RegisterResponse\x12H\n\x0eGiveParameters\x12\x19.Client_Server.ClientName\x1a\x1b.Client_Server.ClientParamsb\x06proto3')
  ,
  dependencies=[google_dot_protobuf_dot_empty__pb2.DESCRIPTOR,])




_CLIENTINFO = _descriptor.Descriptor(
  name='ClientInfo',
  full_name='Client_Server.ClientInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='Client_Server.ClientInfo.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ip', full_name='Client_Server.ClientInfo.ip', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='port', full_name='Client_Server.ClientInfo.port', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=67,
  serialized_end=119,
)


_CLIENTNAME = _descriptor.Descriptor(
  name='ClientName',
  full_name='Client_Server.ClientName',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='Client_Server.ClientName.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=121,
  serialized_end=147,
)


_REGISTERRESPONSE = _descriptor.Descriptor(
  name='RegisterResponse',
  full_name='Client_Server.RegisterResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='Client_Server.RegisterResponse.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='message', full_name='Client_Server.RegisterResponse.message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=149,
  serialized_end=201,
)


_CLIENTPARAMS = _descriptor.Descriptor(
  name='ClientParams',
  full_name='Client_Server.ClientParams',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='Client_Server.ClientParams.ip', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='port', full_name='Client_Server.ClientParams.port', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=203,
  serialized_end=243,
)

DESCRIPTOR.message_types_by_name['ClientInfo'] = _CLIENTINFO
DESCRIPTOR.message_types_by_name['ClientName'] = _CLIENTNAME
DESCRIPTOR.message_types_by_name['RegisterResponse'] = _REGISTERRESPONSE
DESCRIPTOR.message_types_by_name['ClientParams'] = _CLIENTPARAMS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ClientInfo = _reflection.GeneratedProtocolMessageType('ClientInfo', (_message.Message,), dict(
  DESCRIPTOR = _CLIENTINFO,
  __module__ = 'Client_Server_pb2'
  # @@protoc_insertion_point(class_scope:Client_Server.ClientInfo)
  ))
_sym_db.RegisterMessage(ClientInfo)

ClientName = _reflection.GeneratedProtocolMessageType('ClientName', (_message.Message,), dict(
  DESCRIPTOR = _CLIENTNAME,
  __module__ = 'Client_Server_pb2'
  # @@protoc_insertion_point(class_scope:Client_Server.ClientName)
  ))
_sym_db.RegisterMessage(ClientName)

RegisterResponse = _reflection.GeneratedProtocolMessageType('RegisterResponse', (_message.Message,), dict(
  DESCRIPTOR = _REGISTERRESPONSE,
  __module__ = 'Client_Server_pb2'
  # @@protoc_insertion_point(class_scope:Client_Server.RegisterResponse)
  ))
_sym_db.RegisterMessage(RegisterResponse)

ClientParams = _reflection.GeneratedProtocolMessageType('ClientParams', (_message.Message,), dict(
  DESCRIPTOR = _CLIENTPARAMS,
  __module__ = 'Client_Server_pb2'
  # @@protoc_insertion_point(class_scope:Client_Server.ClientParams)
  ))
_sym_db.RegisterMessage(ClientParams)



_REDISSERVICE = _descriptor.ServiceDescriptor(
  name='RedisService',
  full_name='Client_Server.RedisService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=246,
  serialized_end=412,
  methods=[
  _descriptor.MethodDescriptor(
    name='RegisterClient',
    full_name='Client_Server.RedisService.RegisterClient',
    index=0,
    containing_service=None,
    input_type=_CLIENTINFO,
    output_type=_REGISTERRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GiveParameters',
    full_name='Client_Server.RedisService.GiveParameters',
    index=1,
    containing_service=None,
    input_type=_CLIENTNAME,
    output_type=_CLIENTPARAMS,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_REDISSERVICE)

DESCRIPTOR.services_by_name['RedisService'] = _REDISSERVICE

# @@protoc_insertion_point(module_scope)
